{"version":3,"sources":["components/auth/AuthService.js","components/navbar/Navbar.js","components/auth/Signup.js","components/auth/Login.js","components/contents/Contents.js","App.js","serviceWorker.js","index.js"],"names":["AuthService","_this","this","Object","classCallCheck","handleUpload","theFile","service","post","then","res","data","catch","errorHandler","signup","username","password","dateBirth","weigth","heigth","imageUrl","response","login","loggedin","get","logout","axios","create","baseURL","process","withCredentials","Navbar","props","possibleConstructorReturn","getPrototypeOf","call","handleLogout","e","state","loggedInUser","nextProps","setState","objectSpread","react_default","a","createElement","className","onClick","Link","to","Component","Signup","handleFormSubmit","event","preventDefault","weight","height","getUser","user","error","console","log","handleChange","_event$target","target","name","value","defineProperty","handleFileUpload","files","uploadData","FormData","append","secure_url","err","messageError","_this2","id","onSubmit","type","onChange","Login","Contents","App","userObj","_this3","fetchUser","navbar_Navbar","userInSession","contents_Contents","Switch","Route","exact","path","render","auth_Signup","auth_Login","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b86eb810.chunk.js","sourcesContent":["// auth/auth-service.js\nimport axios from 'axios';\n\n// console.log(\"wwww\",env)process.env.REACT_APP_baseURL,\n// debugger\n\nclass AuthService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: process.env.REACT_APP_baseURL,\n      withCredentials: true\n    });\n  };\n  handleUpload = theFile => {\n    return this.service.post('/upload', theFile)\n      .then(res => res.data)\n      .catch(this.errorHandler);\n  }\n\n\n  signup = (username, password,dateBirth,weigth,heigth,imageUrl) => {\n    return this.service.post('/signup', {username, password, dateBirth,weigth,heigth,imageUrl})\n    .then(response => response.data)\n  }\n\n  login = (username, password) => {\n    return this.service.post('/login', {username, password})\n    .then(response => response.data)\n  }\n\n  loggedin = () => {\n    return this.service.get('/currentUser',)\n    .then(response => response.data)\n  }\n\n  logout = () => {\n    return this.service.get('/logout',)\n    .then(response => response.data)\n  }\n}\n\nexport default AuthService;","// navbar/Navbar.js\n\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AuthService from '../auth/AuthService';\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { loggedInUser: null };\n    this.service = new AuthService();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({ ...this.state, loggedInUser: nextProps[\"userInSession\"] })\n  }\n\n  handleLogout = (e) => {\n    this.props.logout()\n  }\n\n  render() {\n    if (this.state.loggedInUser) {\n      return (\n        <nav className=\"nav-style\">\n          <ul>\n            <li><a onClick={this.handleLogout}>Salir</a></li>\n          </ul>\n\n          <h2>Welcome, {this.state.loggedInUser.username}</h2>\n        </nav>\n      )\n    } else {\n      return (\n        <div>\n          <nav className=\"nav-style\">\n            <ul>\n            <li><Link to='/signup'>Registrarse</Link></li>\n            <li><Link to='/login'>Ingresar</Link></li>\n            </ul>\n          </nav>\n        </div>\n      )\n    }\n  }\n}\n\nexport default Navbar;","// auth/Signup.js\nimport React, { Component } from 'react';\nimport AuthService from './AuthService'\nimport '../../style/form.css';\n\n\n//signup y login son iguales a excepción de el html renderizado y el endpoint de nuestra API rest a la que llamamos\n//uno llama a /signup y el otro a /login usando nuestro AuthService\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: '', password: '', dateBirth:'', weight:'', height:'',imageUrl: \"\", messageError:\"\"  };\n    this.service = new AuthService();\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n    const dateBirth = this.state.dateBirth;\n    const weight = this.state.weight;\n    const height = this.state.height;\n    const imageUrl = this.state.imageUrl\n\n    //aquí llamamos al endpoint /signup de nuestra API Rest usando nuestro AuthService\n    this.service.signup(username, password,dateBirth,weight,height.imageUrl)\n      .then(response => {\n        this.setState({\n          username: \"\",\n          password: \"\",\n          dateBirth: \"\",\n          weight : \"\",\n          height : \"\",\n          imageUrl: \"\"\n        });\n        //aquí elevamos el nuevo usuario una vez creado a App usando getUser via props\n        //por tanto, informamos a App de que el nuevo usuario ha sido creado, provocando un re-render\n        //y mostrando la parte de contenidos. Mira la función getUser de App para más info (date cuenta de que establece el state de App)\n        this.props.getUser(response.user)\n      })\n      .catch(error => {console.log(\"FDFD\",error)\n        this.setState({\n          username: username,\n          password: password,\n          dateBirth: dateBirth,\n          weight: weight,\n          height: height,\n          imageUrl: imageUrl,\n          error: true\n          //messageError: error\n        });\n      })\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleFileUpload = e => {\n    console.log(\"The file to be uploaded is: \", e.target.files[0]);\n\n    const uploadData = new FormData();\n    // imageUrl => this name has to be the same as in the model since we pass\n    // req.body to .create() method when creating a new thing in '/api/things/create' POST route\n    uploadData.append(\"imageUrl\", e.target.files[0]);\n    this.service.handleUpload(uploadData)\n    .then(response => {\n        // console.log('response is: ', response);\n        // after the console.log we can see that response carries 'secure_url' which we can use to update the state \n        this.setState({ imageUrl: response.secure_url });\n      })\n      .catch(err => {\n        console.log(\"Error while uploading the file: \", err);\n      });\n}\n\n  render() {\n    return (\n      <div>\n        \n        <h4>Para crear su perfil complete el siguiente formulario</h4>\n        <form id=\"form\" onSubmit={this.handleFormSubmit}>\n          \n          <fieldset>\n            <label>Usuario:</label>\n            <input type=\"text\" name=\"username\" value={this.state.username} onChange={e => this.handleChange(e)} />\n          </fieldset>\n\n          <fieldset>\n            <label>Clave de acceso:</label>\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={e => this.handleChange(e)} />\n          </fieldset>\n\n          <fieldset>\n            <label>Fecha de Nacimiento:</label>\n            <input type=\"date\" name=\"dateBirth\" value={this.state.dateBirth} onChange={e => this.handleChange(e)} />\n          </fieldset>\n\n          <fieldset>\n            <label>Peso:</label>\n            <input type=\"text\" name=\"weight\" value={this.state.weight} onChange={e => this.handleChange(e)} />\n          </fieldset>\n\n          <fieldset>\n            <label>Altura:</label>\n            <input type=\"text\" name=\"height\" value={this.state.height} onChange={ e => this.handleChange(e)}/>\n          </fieldset>\n\n          \n          <button type=\"submit\">Registrarse</button>\n        </form>\n\n        <h1>{this.state.error ? this.state.messageError : ''}</h1>\n        <h1>{console.log(\"RRR\",this.state)}</h1>\n      </div>\n    )\n  }\n}\n\nexport default Signup;","// auth/Signup.js\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AuthService from './AuthService'\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: '', password: '' };\n    this.service = new AuthService();\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    this.service.login(username, password)\n      .then(response => {\n        this.setState({\n          username: username,\n          password: password,\n          error: false\n        });\n\n        this.props.getUser(response)\n      })\n      .catch(error => {\n        this.setState({\n          username: username,\n          password: password,\n          error: true\n        });\n      })\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n\n    return (<div>\n      <h3>Ingrese sus datos de acceso</h3>\n\n      <form id=\"form\" onSubmit={this.handleFormSubmit}>\n        <fieldset>\n          <label>Usuario:</label>\n          <input type=\"text\" name=\"username\" value={this.state.username} onChange={e => this.handleChange(e)} />\n        </fieldset>\n\n        <fieldset>\n          <label>Clave de acceso:</label>\n          <input type=\"password\" name=\"password\" value={this.state.password} onChange={e => this.handleChange(e)} />\n        </fieldset>\n\n        <button type=\"submit\">Ingresar</button>\n      </form>\n\n      <h1>{this.state.error ? 'Error' : ''}</h1>\n    </div>)\n  }\n}\n\nexport default Login;","import React, { Component } from 'react';\n\n//clase componente que renderiza los contenidos genéricos\n//usando rendering condicional y el componente Switch que ya conocéis podéis mostrar los contenidos oportunos que queráis\nclass Contents extends Component {\n  render() {\n    return (<div>\n        <p>Aqui debe ir la pantalla pricipal de los medicamentos.</p>\n        </div>);\n    \n  }\n}\n\nexport default Contents;","import React, { Component } from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\n\n// import ProjectList from './components/projects/ProjectList';\nimport Navbar from './components/navbar/Navbar';\n// import ProjectDetails from './components/projects/ProjectDetails';\nimport Signup from './components/auth/Signup';\nimport Login from './components/auth/Login';\nimport AuthService from './components/auth/AuthService';\nimport Contents from './components/contents/Contents'\n\n//App es la aplicación base, que se sirve del servicio AuthService para conectar con la bbdd\nclass App extends Component {\n\n  //en el tiempo de construcción de la aplicación, creamos una instancia del authservice\n  constructor(props){\n    super(props)\n    //arrancamos el estado con un valor de loggedInUser con nada (luego lo vamos a reemplazar con el valor real)\n    this.state = { loggedInUser: null };\n    this.service = new AuthService();\n  }\n\n  getUser= (userObj) => {\n    this.setState({\n      loggedInUser: userObj\n    })\n  }\n\n  logout = () => {\n    this.service.logout()\n    .then(() => {\n      this.setState({ loggedInUser: null });\n    })\n  }\n\n  //este método vuelca la información del usuario y lo guarda en el state de app que siempre puedes revisitar\n  fetchUser(){\n    if( this.state.loggedInUser === null ){\n\n      //utilizamos el método loggedin para cualquier momento que deseemos obtener la información del usuario quede guardada en el state de app\n      this.service.loggedin()\n      .then(response =>{\n        this.setState({\n          loggedInUser:  response\n        }) \n      })\n      .catch( err =>{\n        this.setState({\n          loggedInUser:  false\n        }) \n      })\n    }\n  }\n\n  render() {\n    //al hacer render, almacenamos la información del usuario existente en el state de app\n    this.fetchUser()\n\n    //aqui hacemos rendering condicional dependiendo de si tenemos un usuario logeado o no\n    if(this.state.loggedInUser){\n      //en este caso mostramos los contenidos ya que hay usuario\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Navbar userInSession={this.state.loggedInUser} logout={this.logout} />\n            {/* aqui simplemente se muestra un lorem ipsum genérico para que veáis contenidos que solo se muestran a usuarios logeados */}\n            <Contents></Contents>\n          </header>\n        </div>\n      );\n    } else {\n      //si no estás logeado, mostrar opcionalmente o login o signup\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Navbar userInSession={this.state.loggedInUser} logout={this.logout} />\n            <Switch>\n              <Route exact path='/signup' render={() => <Signup getUser={this.getUser}/>}/>\n              <Route exact path='/login' render={() => <Login getUser={this.getUser}/>}/>\n            </Switch>\n          </header>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}